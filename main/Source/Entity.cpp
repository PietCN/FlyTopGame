#include <Entity.hpp>

/*********************************************************************************
* Cstr
* Initialisation der Hitpoints
*
*********************************************************************************/
Entity::Entity(int hitpoints) :mHitpoints(hitpoints)
{

}

/*********************************************************************************
* 
*
*********************************************************************************/
void Entity::repair(int points)
{
	mHitpoints += points;
}

/*********************************************************************************
*
*
*********************************************************************************/
void Entity::damage(int points)
{
	mHitpoints -= points;
}

/*********************************************************************************
*
*
*********************************************************************************/
void Entity::destroy()
{
	mHitpoints = 0;
}

/*********************************************************************************
*
*
*********************************************************************************/
int Entity::getHitpoints() const
{
	return mHitpoints;
}

/*********************************************************************************
*
*
*********************************************************************************/
bool Entity::isDestroyed() const
{
	return mHitpoints <= 0;
}

/*********************************************************************************
* Übergibt die Geschwindigkeit als sf::Vector2f  an das Objekt
*
*********************************************************************************/
void Entity::setVelocity(sf::Vector2f velocity)
{
	mVelocity = velocity;
}

/*********************************************************************************
* Übergibt die Geschwindigkeit über zwei float Werte an das Objekt
*
*********************************************************************************/
void Entity::setVelocity(float vX, float vY)
{
	mVelocity.x = vX;
	mVelocity.y = vY;
}

/*********************************************************************************
* Übergibt die Geschwindigkeit dem Aufrufer
*
*********************************************************************************/
sf::Vector2f Entity::getVelocity() const
{
	return mVelocity;
}

/*********************************************************************************
* Update-Methode für die Objekt-Basisklasse
*
*********************************************************************************/
void Entity::updateCurrent(sf::Time dt, CommandQueue& commands)
{
	move(mVelocity * dt.asSeconds());
}

/*********************************************************************************
* Beschleunigung
*
*********************************************************************************/
void Entity::accelerate(sf::Vector2f velocity)
{
	mVelocity += velocity;

}

/*********************************************************************************
* Beschleunigung
*
*********************************************************************************/
void Entity::accelerate(float vX, float vY)
{
	mVelocity.x += vX;
	mVelocity.y += vY;
}

bool Entity::isMarkedForRemoval() const
{
	return isDestroyed();
}